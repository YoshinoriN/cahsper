openapi: 3.0.1
info:
  title: Cahsper API
  description: |
    # Description
    This API documentation regarding OpenAPI specification. Generated by [ReDoc](https://github.com/Rebilly/ReDoc)
  version: 0.0.1
externalDocs:
  description: Source code
  url: 'https://github.com/YoshinoriN/cahsper'
servers:
  - url: http://example.com/
paths:
  /status:
    get:
      summary: Get API server status
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: operational
  /users:
    get:
      summary: Get all users
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
    post:
      summary: Create a new user
      description: |
        Create a new user with the AWS Cognito username attribute
      security:
        - OAuth2:
          - write
      responses:
        201:
          description: Create a user succeeded
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/user'
        400:
          description: Payload is wrong
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/errorMessage'
        401:
          description: Unauthorized
  /users/{userName}:
    get:
      summary: Get a single user
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/user'
        404:
          description: user not found
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/errorMessageNotFound'
  /users/{userName}/comments:
    post:
      summary: Create a new comment
      security:
        - OAuth2:
          - write
      responses:
        201:
          description: Create a comment succeeded
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/comment'
        400:
          description: Payload is wrong
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/errorMessage'
        401:
          description: Unauthorized
        404:
          description: url path not found
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/errorMessageNotFound'
  /comments:
    get:
      summary: Get all users comments
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'
components:
  schemas:
    user:
      type: object
      properties:
        name:
          type: string
          example: JohnDoe
        createdAt:
          type: long
          description: Unix time
          example: 1567814290
    comment:
      type: object
      properties:
        id:
          type: integer
          format: int
          example: 1
        user:
          type: string
          example: JohnDoe
        comment:
          type: string
          example: "Hello Cahsper!!"
        createdAt:
          type: long
          description: Unix time
          example: 1567814290
    errorMessage:
      type: object
      properties:
        message:
          type: string
          example: Something is wrong
    errorMessageNotFound:
      type: object
      properties:
        message:
          type: string
          example: NotFound
  securitySchemes:
    OAuth2:
      type: oauth2
      description: |
        Use AWS Cognito JWT for authorization and authentication. [Please see AWS document](https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html).
      flows:
        authorizationCode:
          scopes:
            write:
            read:
